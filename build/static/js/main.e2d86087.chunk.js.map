{"version":3,"sources":["components/Converter.js","App.js","reportWebVitals.js","index.js"],"names":["Converter","props","useState","tempC","setTempC","errorTempC","setErrorTempC","tempF","setTempF","errorTempF","setErrorTempF","type","id","value","onChange","event","temp","target","trim","isNaN","convertToF","convertToC","console","log","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8MA8DeA,MA5Df,SAAmBC,GACjB,MAA0BC,mBAAS,GAAnC,mBAAOC,EAAP,KAAcC,EAAd,KACA,EAAoCF,mBAAS,IAA7C,mBAAOG,EAAP,KAAmBC,EAAnB,KACA,EAA0BJ,mBAAS,IAAnC,mBAAOK,EAAP,KAAcC,EAAd,KACA,EAAoCN,mBAAS,IAA7C,mBAAOO,EAAP,KAAmBC,EAAnB,KAUA,OACE,qCACE,2DACA,uBACEC,KAAK,OACLC,GAAG,OACHC,MAAOV,EACPW,SAAU,SAACC,GACT,IAAIC,EAAOD,EAAME,OAAOJ,MAAMK,OACzBC,MAAMH,IAAqB,MAAZA,EAAK,GAKvBV,EAAc,iDAJdE,EAlBV,SAAoBL,GAClB,OAAY,IAALA,EAAkB,GAiBRiB,CAAWJ,IACpBZ,EAASY,GACTV,EAAc,QAMpB,iCAAOD,EAAP,OAEA,uBACA,uBAEA,8DACA,uBACEM,KAAK,OACLC,GAAG,OACHC,MAAON,EACPO,SAAU,SAACC,GACT,IAAIC,EAAOD,EAAME,OAAOJ,MAAMK,OACzBC,MAAMH,IAAqB,MAAZA,EAAK,GAKvBN,EAAc,iDAJdN,EAnCV,SAAoBG,GAClB,OAAuB,EAAI,GAAnBA,EAAQ,IAkCCc,CAAWL,IACpBR,EAASQ,GACTN,EAAc,QAMpB,iCAAOD,EAAP,OAECa,QAAQC,IAAIpB,EAAQ,KAAOI,OC7CnBiB,MARf,WACE,OACE,mCACE,cAAC,EAAD,OCKSC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.e2d86087.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\n\r\nfunction Converter(props) {\r\n  const [tempC, setTempC] = useState(0);\r\n  const [errorTempC, setErrorTempC] = useState(\"\");\r\n  const [tempF, setTempF] = useState(32);\r\n  const [errorTempF, setErrorTempF] = useState(\"\");\r\n\r\n  function convertToF(tempC) {\r\n    return tempC * (9 / 5) + 32;\r\n  }\r\n\r\n  function convertToC(tempF) {\r\n    return (tempF - 32) * (5 / 9);\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <span>Temperature in Celsius </span>\r\n      <input\r\n        type=\"text\"\r\n        id=\"txtC\"\r\n        value={tempC}\r\n        onChange={(event) => {\r\n          let temp = event.target.value.trim();\r\n          if (!isNaN(temp) || temp[0] === \"-\") {\r\n            setTempF(convertToF(temp));\r\n            setTempC(temp);\r\n            setErrorTempC(\"\");\r\n          } else {\r\n            setErrorTempC(\"Invalid Temperature(must be a numeric value)\");\r\n          }\r\n        }}\r\n      />\r\n      <span>{errorTempC} </span>\r\n\r\n      <br />\r\n      <br />\r\n\r\n      <span>Temperature in Fahrenheit </span>\r\n      <input\r\n        type=\"text\"\r\n        id=\"txtF\"\r\n        value={tempF}\r\n        onChange={(event) => {\r\n          let temp = event.target.value.trim();\r\n          if (!isNaN(temp) || temp[0] === \"-\") {\r\n            setTempC(convertToC(temp));\r\n            setTempF(temp);\r\n            setErrorTempF(\"\");\r\n          } else {\r\n            setErrorTempF(\"Invalid Temperature(must be a numeric value)\");\r\n          }\r\n        }}\r\n      />\r\n      <span>{errorTempF} </span>\r\n\r\n      {console.log(tempC + \"  \" + tempF)}\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Converter;\r\n","import \"./App.css\";\nimport React from \"react\";\nimport Converter from \"./components/Converter\";\n\nfunction App() {\n  return (\n    <>\n      <Converter />\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}